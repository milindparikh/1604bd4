<!DOCTYPE html>

<html>
  <head> 
      <title> {{ pagename|title }} </title>
   </head>


  
  <body bgcolor="#000000"> 

	<script type="text/javascript" src="/static/js/dat.gui.js"></script>
        <script src="/static/js/three.js"></script>
        <script src="/static/js/threex.dynamictexture.js"></script>
<script type="text/javascript">


    // global variables
    var numofapps;
    var numofdays;


    var renderer;
    var scene;
    var camera;
    
    var cameraControl;
    

    var cubes;
    var dailyCubes;

    var cubeIntersection;
    var cubeUnion;
    
    var selectedApps;
    var r_interactions;    
    




var InputControls = new function() { 



    var statsJSON = httpGet("/total.stats");
    var objStats = JSON.parse(statsJSON); 


    
    
    this.customers = objStats[0].customers;
    this.transactions = objStats[1].transactions;
    this.setcardq = "";
    this.setmemq = "";
    this.hshq = "";
    
    

    
    };
    

function       initInputThroughdatGUI() {



  var text =  InputControls;


  var gui = new dat.GUI({ autoPlace: false });
  gui.domElement.style.position='absolute';
  gui.domElement.style.top='20px';
  gui.domElement.style.left='20px'
  var customContainer = document.getElementById('my-gui-container');
  customContainer.appendChild(gui.domElement);
  gui.add(text, 'customers');
  gui.add(text, 'transactions');
    var setcardq = gui.add(text, 'setcardq');
    var setmemq = gui.add(text, 'setmemq');
    var hshq = gui.add(text, 'hshq');
    
    
    setcardq.onFinishChange(function (value) {
    var myData = {'query': value};
         var xhr = new XMLHttpRequest();
         xhr.open("POST", "/scard");
         xhr.setRequestHeader('Content-Type', 'application/json');
         xhr.onreadystatechange = function () {
             if (xhr.readyState == 4 && xhr.status == 200) {
                 obj = JSON.parse(xhr.responseText);

                 var  dynamicTexturei  = new THREEx.DynamicTexture(512,512);
                 dynamicTexturei.context.font	= "bolder 60px Verdana";
                 dynamicTexturei.clear(cubeColors[1]);

                 var cubeInGeometry = new THREE.BoxGeometry(8, 5, 8);
                 var cubeInMaterial = new THREE.MeshLambertMaterial({map: dynamicTexturei.texture          });

                 var cubeIntersection  = new THREE.Mesh(cubeInGeometry, cubeInMaterial);
                 cubeIntersection.position.y = 4;
                 cubeIntersection.position.z = 2;
                 cubeIntersection.position.x = 14;
                 cubeIntersection.castShadow = true;

                 dynamicTexturei.drawText(obj.value, 32, 256, 'black');
                 dynamicTexturei.texture.needsUpdate  = true;

                 scene.add(cubeIntersection);


             }
          }
          xhr.send(JSON.stringify(myData));

    });

    setmemq.onFinishChange(function (value) {
    var myData = {'query': value};
         var xhr = new XMLHttpRequest();
         xhr.open("POST", "/smem");
         xhr.setRequestHeader('Content-Type', 'application/json');
         xhr.onreadystatechange = function () {
             if (xhr.readyState == 4 && xhr.status == 200) {


                 obj = JSON.parse(xhr.responseText);

                 var  dynamicTexturei  = new THREEx.DynamicTexture(512,512);
                 dynamicTexturei.context.font	= "bolder 60px Verdana";
                 dynamicTexturei.clear(cubeColors[2]);

                 var cubeInGeometry = new THREE.BoxGeometry(8, 5, 8);
                 var cubeInMaterial = new THREE.MeshLambertMaterial({map: dynamicTexturei.texture          });

                 var cubeIntersection  = new THREE.Mesh(cubeInGeometry, cubeInMaterial);
                 cubeIntersection.position.y = 4;
                 cubeIntersection.position.z = 15;
                 cubeIntersection.position.x = 14;
                 cubeIntersection.castShadow = true;

                 dynamicTexturei.drawText(obj.value, 32, 256, 'black');
                 dynamicTexturei.texture.needsUpdate  = true;

                 scene.add(cubeIntersection);





             }
          }
          xhr.send(JSON.stringify(myData));
    });
    

}




function httpGet(theUrl)
{
    var xmlHttp = null;

    xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", theUrl, false );
    xmlHttp.send( null );
    return xmlHttp.responseText;
}


function    initOutputThroughthreejsGUI() {


        // create a scene, that will hold all our elements such as objects, cameras and lights.
        scene = new THREE.Scene();

        // create a camera, which defines where we're looking at.
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);

//        cameraControl = new THREE.OrbitControls( camera );
//        cameraControl.addEventListener( 'change', render );

        // create a render, sets the background color and the size
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMapEnabled = true;

        // create the ground plane
        var planeGeometry = new THREE.PlaneGeometry(80, 100);
        var planeMaterial = new THREE.MeshLambertMaterial({color: 0xcccccc});
        var plane = new THREE.Mesh(planeGeometry, planeMaterial);
        plane.receiveShadow = true;

        // rotate and position the plane
        plane.rotation.x = -0.5 * Math.PI;
        plane.position.x = 0;
        plane.position.y = -2;
        plane.position.z = 0;

        // add the plane to the scene
        scene.add(plane);



        // position and point the camera to the center of the scene
        camera.position.x = 45;
        camera.position.y = 16;
        camera.position.z = 43;
        camera.lookAt(scene.position);


        // add spotlight for the shadows
        var spotLight = new THREE.SpotLight(0xffffff);
        spotLight.position.set(100, 200, 20);
        spotLight.shadowCameraNear = 200;
        spotLight.shadowCameraFar = 500;
        spotLight.castShadow = true;

        scene.add(spotLight);


        // add the output of the renderer to the html element
        document.body.appendChild(renderer.domElement);

        // call the render function, after the first render, interval is determined
        // by requestAnimationFrame
        render();


}



function render() {
        // render using requestAnimationFrame
        requestAnimationFrame(render);
        renderer.render(scene, camera);
}





window.onload = function() {


    cubeColors = ["red", "white", "blue", "orange", "yellow"];
			    
   initInputThroughdatGUI();
   initOutputThroughthreejsGUI();
}




</script>



<div id="my-gui-container">
</div>


<div id="my-gui2-container">
</div>


<div id="my-gui3-container">
</div>
<div id="my-gui4-container">
</div>

 </body> 



</html>

